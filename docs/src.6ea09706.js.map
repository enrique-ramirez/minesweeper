{"version":3,"sources":["index.js"],"names":["MineSweeper","width","height","mines","game","board","open","renderGame","document","getElementById","innerHTML","map","row","y","col","x","join","placeMines","getRandomCoordinate","Math","floor","random","handleClick","getAdjacentMines","numberOfMines","xMin","max","yMin","xMax","min","yMax","i","j","init","Array","from","keys","push","renderForm","generate","parseInt","value","alert","instance","window","minesweeper"],"mappings":";AAkOU,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,eAAA,GAAA,MAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA,KAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EA9NV,SAASA,EAAYC,EAAOC,EAAQC,GAE9BC,IAAAA,EAAO,CACTD,MAAO,GACPE,MAAO,IAGLC,EAAO,EAwDFC,SAAAA,IACPC,SAASC,eAAe,OAAOC,UAEzBN,kDAAAA,OAAAA,EAAKC,MACJM,IACC,SAACC,EAAKC,GAEFD,MAAAA,oCAAAA,OAAAA,EACCD,IACC,SAACG,EAAKC,GAGJD,MAAAA,2DAAAA,OAAQ,MAARA,EACIA,EAEgEC,2FAAAA,OAAAA,EAAMF,MAAAA,OAAAA,EACpEC,iCAAAA,OAAAA,EAPR,6DAAA,8CAcDE,KAAK,UAlBV,kCAsBDA,KAAK,UA1BZ,wBAmDOC,SAAAA,IACQC,IAAf,EAAA,EAvGO,CAHGC,KAAKC,MAAMD,KAAKE,SAAWpB,GAC3BkB,KAAKC,MAAMD,KAAKE,SAAWnB,IAyGrC,GAAOa,EAAP,EAAA,GAAUF,EAAV,EAAA,GAEKT,EAAKD,MAASY,GAAAA,OAAAA,EAAKF,KAAAA,OAAAA,IAGtBI,IAFAb,EAAKD,MAASY,GAAAA,OAAAA,EAAKF,KAAAA,OAAAA,KAAO,EA6CvBT,OANPA,EAAKkB,YAlBIA,SAAYP,EAAGF,GAElBT,EAAKD,MAASY,GAAAA,OAAAA,EAAKF,KAAAA,OAAAA,IA9CvBL,SAASC,eAAe,OAAOC,UAA/B,0KAhFOa,SAAAA,EAAiBR,EAAGF,GAatB,IAZDW,IAAAA,EAAgB,EAIdC,EAAON,KAAKO,IAAI,EAAGX,EAAI,GACvBY,EAAOR,KAAKO,IAAI,EAAGb,EAAI,GAGvBe,EAAOT,KAAKU,IAAI5B,EAAQ,EAAGc,EAAI,GAC/Be,EAAOX,KAAKU,IAAI3B,EAAS,EAAGW,EAAI,GAG7BkB,EAAIN,EAAMM,GAAKH,EAAMG,IAEvB,IAAA,IAAIC,EAAIL,EAAMK,GAAKF,EAAME,IAEtBD,IAAMhB,GAAKiB,IAAMnB,GAEjBT,EAAKD,MAAS4B,GAAAA,OAAAA,EAAKC,KAAAA,OAAAA,MAErBR,GAAiB,GAarBA,GANJpB,EAAKC,MAAMQ,GAAGE,GAAKS,EAEnBlB,GAAQ,EAIc,IAAlBkB,EACG,IAAA,IAAIO,EAAIN,EAAMM,GAAKH,EAAMG,IACvB,IAAA,IAAIC,EAAIL,EAAMK,GAAKF,EAAME,IACtBD,IAAMhB,GAAKiB,IAAMnB,GAA2B,MAArBT,EAAKC,MAAM2B,GAAGD,IACzCR,EAAiBQ,EAAGC,GA6F5BT,CAAiBR,EAAGF,GAEpBN,IAGIN,EAAQC,EAASC,IAAUG,IA/C/BE,SAASC,eAAe,OAAOC,UAA/B,kTAsDFN,EAAKG,WAAaA,EAlCT0B,WAEF,IAAA,IAAIF,EAAI,EAAGA,EAAI7B,EAAQ6B,IAAK,CAE3BnB,IAAAA,EAAMsB,MAAMC,KAAKD,MAAMjC,GAAOmC,QAAQzB,IAAI,WAAM,MAAA,MAEpDP,EAAKC,MAAMgC,KAAKzB,GAIb,IAAA,IAAIoB,EAAI,EAAGA,EAAI7B,EAAO6B,IACzBf,IA0BJgB,GAEO7B,EAKT,SAASkC,IACP9B,SAASC,eAAe,OAAOC,UAA/B,qhBAyBF,SAAS6B,IAEDtC,IAAAA,EAAQuC,SAAShC,SAASC,eAAe,SAASgC,MAAO,IACzDvC,EAASsC,SAAShC,SAASC,eAAe,UAAUgC,MAAO,IAC7DtC,EAAQqC,SAAShC,SAASC,eAAe,SAASgC,MAAO,IAEzDtC,GAAAA,GAASF,EAAQC,EACZwC,OAAAA,MAAmDvC,6CAAAA,OAAAA,EAAkBF,cAAAA,OAAAA,EAAQC,EAApF,+CAGIyC,IAAAA,EAAW,IAAI3C,EACnBC,EACAC,EACAC,GAIFwC,EAASpC,aAGTqC,OAAOC,YAAYF,SAAWA,EA1NhCC,OAAOC,YAAc,GA8NrBD,OAAOC,YAAYN,SAAWA,EAC9BK,OAAOC,YAAYP,WAAaA,EAEhCA","file":"src.6ea09706.js","sourceRoot":"../src","sourcesContent":["// NameSpace\nwindow.minesweeper = {};\n\n// Constructor function\nfunction MineSweeper(width, height, mines) {\n  // API\n  let game = {\n    mines: {},\n    board: []\n  };\n  // Number of opened cells. Useful for displaying WIN message.\n  let open = 0;\n\n  function getRandomCoordinate() {\n    const x = Math.floor(Math.random() * width);\n    const y = Math.floor(Math.random() * height);\n\n    return [x, y];\n  }\n\n  function getAdjacentMines(x, y) {\n    let numberOfMines = 0;\n\n    // Minimums are calculated as n - 1. Math.max is used to default to 0 if\n    // a negative number results from the operation.\n    const xMin = Math.max(0, x - 1);\n    const yMin = Math.max(0, y - 1);\n    // Max are calculated as n + 1. Math.min is used to default to our max\n    // width/height in case the result from the operation is bigger.\n    const xMax = Math.min(width - 1, x + 1);\n    const yMax = Math.min(height - 1, y + 1);\n\n    // For every X...\n    for (let i = xMin; i <= xMax; i++) {\n      // ... and every Y\n      for (let j = yMin; j <= yMax; j++) {\n        // Check if it's not the \"clicked\" cell...\n        if (!(i === x && j === y)) {\n          // ... and also make sure there is a mine in the cell\n          if (game.mines[`${i},${j}`]) {\n            // If there is, then sum to the result\n            numberOfMines += 1;\n          }\n        }\n      }\n    }\n\n    // Update the number of mines in this coordinate\n    game.board[y][x] = numberOfMines;\n    // ALso add 1 to our opened cells\n    open += 1;\n\n    // If there were no adjacent mines, open every coordinate as well and\n    // check for adjacent mines there.\n    if (numberOfMines === 0) {\n      for (let i = xMin; i <= xMax; i++) {\n        for (let j = yMin; j <= yMax; j++) {\n          if (!(i === x && j === y) && game.board[j][i] === \"-\") {\n            getAdjacentMines(i, j);\n          }\n        }\n      }\n    }\n  }\n\n  // Messy function to render our board as HTML elements. It basically iterates every row and then\n  // every column of our game.board to create a grid of <divs> with either a <button> or a number.\n  function renderGame() {\n    document.getElementById(\"app\").innerHTML = `\n      <div class=\"container board\">\n        ${game.board\n          .map(\n            (row, y) =>\n              `<div class=\"row\">\n              ${row\n                .map(\n                  (col, x) => `\n                <div class=\"cell\">\n                  ${\n                    col !== \"-\"\n                      ? col\n                      : `\n                      <button type=\"button\" onclick=\"minesweeper.instance.handleClick(${x}, ${y})\">\n                        ${col}\n                      </button>\n                      `\n                  }\n                </div>\n              `\n                )\n                .join(\"&nbsp;\")}\n          </div>\n        `\n          )\n          .join(\"&nbsp;\")}\n      </div>\n    `;\n  }\n\n  function renderGameOver() {\n    document.getElementById(\"app\").innerHTML = `\n      <div class=\"container message\">\n        <p>You lose!</p>\n        <button type=\"button\" onclick=\"minesweeper.renderForm()\">Retry</button>\n      </div>\n    `;\n  }\n\n  function renderWin() {\n    document.getElementById(\"app\").innerHTML = `\n      <div class=\"container message\">\n        <img alt=\"WINNER WINNER CHICKEN DINNER\" src=\"https://media1.giphy.com/media/g9582DNuQppxC/giphy.gif\" />\n        <p>CONGRATULATIONS! You win!</p>\n        <button type=\"button\" onclick=\"minesweeper.renderForm()\">Play again</button>\n      </div>\n    `;\n  }\n\n  // Place initial mines\n  function placeMines() {\n    const [x, y] = getRandomCoordinate();\n\n    if (!game.mines[`${x},${y}`]) {\n      game.mines[`${x},${y}`] = true;\n    } else {\n      placeMines();\n    }\n  }\n\n  function init() {\n    // Build initial, empty grid\n    for (let i = 0; i < height; i++) {\n      // This just creates an array of n length and fills it with dashes.\n      let row = Array.from(Array(width).keys()).map(() => \"-\");\n      // Push our row to our board. Our board is basically an array of rows.\n      game.board.push(row);\n    }\n\n    // Place Mines\n    for (let j = 0; j < mines; j++) {\n      placeMines();\n    }\n  }\n\n  function handleClick(x, y) {\n    // If user clicked on a mine, it's game over\n    if (game.mines[`${x},${y}`]) {\n      return renderGameOver();\n    }\n\n    // Else, calculate adjacent mines\n    getAdjacentMines(x, y);\n    // ... re-render UI.\n    renderGame();\n\n    // If there's nothing left to click but mines, render win.\n    if (width * height - mines === open) {\n      renderWin();\n    }\n  }\n\n  // Generate API interface shortcuts for click and render methods.\n  game.handleClick = handleClick;\n  game.renderGame = renderGame;\n\n  // Initialize\n  init();\n\n  return game;\n}\n\n// Generates our configuration form. Just asks for the size of grid\n// and number of mines.\nfunction renderForm() {\n  document.getElementById(\"app\").innerHTML = `\n    <div class=\"container form\">\n      <label>\n        Grid Size:\n        <br />\n        <div class=\"size\">\n          <input id=\"width\" type=\"number\" value=\"5\" />\n          <span>x</span>\n          <input id=\"height\" type=\"number\" value=\"5\" />\n        </div>\n      </label>\n\n      <label>\n        Number of mines:\n        <br />\n        <input id=\"mines\" type=\"number\" value=\"3\" />\n      </label>\n\n      <button class=\"start\" type=\"button\" onclick=\"minesweeper.generate()\">Start Game!</button>\n    </div>\n\n  `;\n}\n\n// Generates a new instance of our game.\nfunction generate() {\n  // Get values from form\n  const width = parseInt(document.getElementById(\"width\").value, 10);\n  const height = parseInt(document.getElementById(\"height\").value, 10);\n  let mines = parseInt(document.getElementById(\"mines\").value, 10);\n\n  if (mines >= width * height) {\n    return alert(`Too many mines. You're trying to allocate ${mines} mines in ${width * height} spaces! Try reducing the number of mines.`);\n  }\n  // create our instance\n  const instance = new MineSweeper(\n    width,\n    height,\n    mines,\n  );\n\n  // Render the game\n  instance.renderGame();\n\n  // Assign global variable for access\n  window.minesweeper.instance = instance;\n}\n\n// Global variables for access to methods\nwindow.minesweeper.generate = generate;\nwindow.minesweeper.renderForm = renderForm;\n\nrenderForm();\n"]}